import {
  Component,
  Input,
  Renderer2,
  ElementRef,
  NgModule
} from "@angular/core";

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var FormatCodeComponent = /** @class */ (function() {
  function FormatCodeComponent(renderer, el) {
    this.renderer = renderer;
    this.el = el;
    this.color = "rgb(42,100,250)";
    this.bgColor = "rgba(0,0,30,0.9)";
    this.font = "consolas, monospace";
  }
  /**
   * @return {?}
   */
  FormatCodeComponent.prototype.ngOnInit
  /**
   * @return {?}
   */ = function() {
    this.renderer.setStyle(
      this.el.nativeElement.firstElementChild,
      "color",
      this.color
    );
    this.renderer.setStyle(
      this.el.nativeElement.firstElementChild,
      "backgroundColor",
      this.bgColor
    );
    this.renderer.setStyle(
      this.el.nativeElement.firstElementChild,
      "font-family",
      this.font
    );
  };
  FormatCodeComponent.decorators = [
    {
      type: Component,
      args: [
        {
          selector: "format-code",
          template:
            "\n    <div>\n      <ng-content></ng-content>\n    </div>\n  ",
          styles: [
            "\n    div {\n      padding: 20px;\n      margin: 10px auto;\n      box-shadow: 1px 3px 10px 1px rgba(0, 0, 0, 0.3);\n      border-radius: 7px;\n    }\n  "
          ]
        }
      ]
    }
  ];
  /** @nocollapse */
  FormatCodeComponent.ctorParameters = function() {
    return [{ type: Renderer2 }, { type: ElementRef }];
  };
  FormatCodeComponent.propDecorators = {
    color: [{ type: Input }],
    bgColor: [{ type: Input }],
    font: [{ type: Input }]
  };
  return FormatCodeComponent;
})();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var FormatCodeModule = /** @class */ (function() {
  function FormatCodeModule() {}
  FormatCodeModule.decorators = [
    {
      type: NgModule,
      args: [
        {
          declarations: [FormatCodeComponent],
          imports: [],
          exports: [FormatCodeComponent]
        }
      ]
    }
  ];
  return FormatCodeModule;
})();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

export { FormatCodeComponent, FormatCodeModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWF0LWNvZGUuanMubWFwIiwic291cmNlcyI6WyJuZzovL2Zvcm1hdC1jb2RlL2xpYi9mb3JtYXQtY29kZS5jb21wb25lbnQudHMiLCJuZzovL2Zvcm1hdC1jb2RlL2xpYi9mb3JtYXQtY29kZS5tb2R1bGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgSW5wdXQsIFJlbmRlcmVyMiwgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZm9ybWF0LWNvZGUnLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxkaXY+XG4gICAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG4gICAgPC9kaXY+XG4gIGAsXG4gIHN0eWxlczogW2BcbiAgICBkaXYge1xuICAgICAgcGFkZGluZzogMjBweDtcbiAgICAgIG1hcmdpbjogMTBweCBhdXRvO1xuICAgICAgYm94LXNoYWRvdzogMXB4IDNweCAxMHB4IDFweCByZ2JhKDAsIDAsIDAsIDAuMyk7XG4gICAgICBib3JkZXItcmFkaXVzOiA3cHg7XG4gICAgfVxuICBgXVxufSlcbmV4cG9ydCBjbGFzcyBGb3JtYXRDb2RlQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgQElucHV0KCkgY29sb3I6IHN0cmluZyA9IFwicmdiKDQyLDEwMCwyNTApXCJcbiAgQElucHV0KCkgYmdDb2xvcjogc3RyaW5nID0gXCJyZ2JhKDAsMCwzMCwwLjkpXCJcbiAgQElucHV0KCkgZm9udDogc3RyaW5nID0gXCJjb25zb2xhcywgbW9ub3NwYWNlXCJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyLCBwcml2YXRlIGVsOiBFbGVtZW50UmVmKSB7IH1cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZSh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuZmlyc3RFbGVtZW50Q2hpbGQsICdjb2xvcicsIHRoaXMuY29sb3IpXG4gICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZSh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuZmlyc3RFbGVtZW50Q2hpbGQsICdiYWNrZ3JvdW5kQ29sb3InLCB0aGlzLmJnQ29sb3IpXG4gICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZSh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuZmlyc3RFbGVtZW50Q2hpbGQsICdmb250LWZhbWlseScsIHRoaXMuZm9udClcbiAgfVxufSIsImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb3JtYXRDb2RlQ29tcG9uZW50IH0gZnJvbSAnLi9mb3JtYXQtY29kZS5jb21wb25lbnQnO1xuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFtGb3JtYXRDb2RlQ29tcG9uZW50XSxcbiAgaW1wb3J0czogW1xuICBdLFxuICBleHBvcnRzOiBbRm9ybWF0Q29kZUNvbXBvbmVudF1cbn0pXG5leHBvcnQgY2xhc3MgRm9ybWF0Q29kZU1vZHVsZSB7IH1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQTtJQXFCRSw2QkFBb0IsUUFBbUIsRUFBVSxFQUFjO1FBQTNDLGFBQVEsR0FBUixRQUFRLENBQVc7UUFBVSxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBSHRELFVBQUssR0FBVyxpQkFBaUIsQ0FBQTtRQUNqQyxZQUFPLEdBQVcsa0JBQWtCLENBQUE7UUFDcEMsU0FBSSxHQUFXLHFCQUFxQixDQUFBO0tBQ3VCOzs7O0lBQ3BFLHNDQUFROzs7SUFBUjtRQUNFLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLGlCQUFpQixFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUE7UUFDcEYsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsaUJBQWlCLEVBQUUsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBQ2hHLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLGlCQUFpQixFQUFFLGFBQWEsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7S0FDMUY7O2dCQXpCRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLGFBQWE7b0JBQ3ZCLFFBQVEsRUFBRSw4REFJVDs2QkFDUSwySkFPUjtpQkFDRjs7OztnQkFoQmtDLFNBQVM7Z0JBQUUsVUFBVTs7O3dCQWtCckQsS0FBSzswQkFDTCxLQUFLO3VCQUNMLEtBQUs7O0lBT1IsMEJBQUM7Q0ExQkQ7Ozs7OztBQ0ZBO0lBR0E7S0FNaUM7O2dCQU5oQyxRQUFRLFNBQUM7b0JBQ1IsWUFBWSxFQUFFLENBQUMsbUJBQW1CLENBQUM7b0JBQ25DLE9BQU8sRUFBRSxFQUNSO29CQUNELE9BQU8sRUFBRSxDQUFDLG1CQUFtQixDQUFDO2lCQUMvQjs7SUFDK0IsdUJBQUM7Q0FOakM7Ozs7Ozs7Ozs7Ozs7OyJ9
